const express = require("express");
const router = express.Router();
const { renderCard } = require("../middleware/cardRenderer.js");
const { log } = require("../middleware/utils.js");
const { renderErrorCard } = require("../middleware/cardRenderer.js");
const { dateTan } = require("datetan");
const { getOsuToken, fetchUserData } = require("../services/osuApi.js");

const MIN_HEIGHT = 30;
const MAX_HEIGHT = 1000;
const DEFAULT_MINI_HEIGHT = 120;
const DEFAULT_FULL_HEIGHT = 200;
const MAX_USERNAME_LENGTH = 30;

/**
 * Helper function to log the src of a req
 * @param {*} req - The req obj
 * @returns {string} - The src of the req
 */
const getRequestSource = (req) => {
	const referer = req.headers.referer || "direct";
	if (referer === "direct") return "Direct";

	try {
		if (referer.includes("osu-profile-stats.vercel.app")) {
			return "Internal (Editor)";
		}
		return new URL(referer).hostname;
	} catch (error) {
		return "Unknown";
	}
};

router.get("/:username", async (req, res) => {
	try {
		const { username } = req.params;
		let { playmode, background, hex, version, height, supporter, team } = req.query;

		const source = getRequestSource(req);

		log(
			`[${dateTan(
				new Date(),
				"YYYY-MM-DD HH:mm:ss:ms Z"
			)}][REQUEST] Profile stats for "${username}". Source: ${source}. Params: ${JSON.stringify(req.query)}`
		);

		if (!username || username.trim() === "") {
			const errorCard = await renderErrorCard(DEFAULT_MINI_HEIGHT, 400, "Username is required");
			res.setHeader("Content-Type", "image/svg+xml");
			return res.status(400).send(errorCard);
		}

		if (username.length > MAX_USERNAME_LENGTH) {
			const errorCard = await renderErrorCard(DEFAULT_MINI_HEIGHT, 400, "Username is too long");
			res.setHeader("Content-Type", "image/svg+xml");
			return res.status(400).send(errorCard);
		}

		version = version === "full" ? "full" : "mini";
		const defaultHeight = version === "full" ? DEFAULT_FULL_HEIGHT : DEFAULT_MINI_HEIGHT;
		let requestedHeight = parseInt(height, 10);

		if (isNaN(requestedHeight) || requestedHeight < MIN_HEIGHT || requestedHeight > MAX_HEIGHT) {
			requestedHeight = defaultHeight;
		}

		const token = await getOsuToken();
		let userData;
		try {
			userData = await fetchUserData(username, token, playmode);
		} catch (fetchError) {
			const isUserNotFound = fetchError.response?.status === 404;
			const errorMessage = isUserNotFound ? `User "${username}" not found` : "Failed to fetch osu! data";
			const statusCode = isUserNotFound ? 404 : 500;

			log(`[ERROR] ${errorMessage}. Status: ${statusCode}`);
			const errorCard = await renderErrorCard(
				requestedHeight,
				400 * (requestedHeight / defaultHeight),
				errorMessage
			);
			res.setHeader("Content-Type", "image/svg+xml");
			return res.status(statusCode).send(errorCard);
		}

		const cardOptions = {
			background: background || undefined,
			hex: hex || undefined,
			version: version,
			supporter: supporter,
			team: team,
		};

		const cardSvgString = await renderCard(userData, cardOptions);

		const originalWidth = 400;
		const originalHeight = version === "full" ? DEFAULT_FULL_HEIGHT : DEFAULT_MINI_HEIGHT;
		const scaleFactor = requestedHeight / originalHeight;
		const resizedWidth = originalWidth * scaleFactor;

		const finalSvg = `
			<!-- Card Generated by https://osu-profile-stats.vercel.app -->
    		<!-- Made with ♥ by Tanese -->
            <svg xmlns="http://www.w3.org/2000/svg" 
                width="${resizedWidth}" 
                height="${requestedHeight}" 
                viewBox="0 0 ${originalWidth} ${originalHeight}">
                ${cardSvgString}
            </svg>
        `;

		res.setHeader("Content-Type", "image/svg+xml");
		res.setHeader("Cache-Control", "public, max-age=300");
		res.send(finalSvg);

		log(
			`[${dateTan(
				new Date(),
				"YYYY-MM-DD HH:mm:ss:ms Z",
				"en-us"
			)}][RESPONSE] Profile card for ${username} sent successfully ＞︿＜.`
		);
	} catch (error) {
		console.error("An unexpected error occurred in /profile-stats route:", error);
		log(`[FATAL ERROR] Internal Server Error for request: ${req.originalUrl}. Error: ${error.message}`);

		const requestedHeight = parseInt(req.query.height, 10) || DEFAULT_MINI_HEIGHT;
		const errorCard = await renderErrorCard(
			requestedHeight,
			400 * (requestedHeight / DEFAULT_MINI_HEIGHT),
			"An unexpected error occurred"
		);

		res.setHeader("Content-Type", "image/svg+xml");
		res.status(500).send(errorCard);
	}
});

module.exports = router;
